% # -*- f90 -*-
% # vi: set sw=4 ts=8:
!-------------------------------------------------------------------------------
!> module GTOOL_FILE
!!
!! @par Description
!!          unified hundring of various kinds of files
!!
!! @author Team SCALE
!!
!! @par History
!! @li      2012-06-12 (S.Nishizawa) [new] Imported from SCALE-LES
!!
!<
!-------------------------------------------------------------------------------
! Warning: This file was generated from <%=__FILE__%>.
!          Do not edit this file.
!-------------------------------------------------------------------------------
module gtool_file
  !-----------------------------------------------------------------------------
  !
  !++ Used modules
  !
  use gtool_file_h
  use dc_log, only: &
       Log, &
       LOG_LMSG
  !-----------------------------------------------------------------------------
  implicit none
  private
  !-----------------------------------------------------------------------------
  !
  !++ Public procedures
  !
  public :: FileOpen
  public :: FileCreate
  public :: FileSetOption
  public :: FilePutAxis
  public :: FilePutAssociatedCoordinates
  public :: FileAddVariable
  public :: FileGetShape
  public :: FileRead
  public :: FileWrite
  public :: FileClose
  public :: FileCloseAll

  interface FilePutAxis
     module procedure FilePutAxisRealSP
     module procedure FilePutAxisRealDP
  end interface FilePutAxis
  interface FilePutAssociatedCoordinates
% for n in 1..4
%   %w(SP DP).each do |rp|
    module procedure FilePut<%=n%>DAssociatedCoordinatesReal<%=rp%>
%   end
% end
  end interface FilePutAssociatedCoordinates
  interface FileAddVariable
     module procedure FileAddVariableNoT
     module procedure FileAddVariableRealSP
     module procedure FileAddVariableRealDP
  end interface FileAddVariable
  interface FileRead
     module procedure FileRead1DRealSP
     module procedure FileRead1DRealDP
     module procedure FileRead2DRealSP
     module procedure FileRead2DRealDP
     module procedure FileRead3DRealSP
     module procedure FileRead3DRealDP
  end interface FileRead
  interface FileWrite
     module procedure FileWrite1DRealSP
     module procedure FileWrite1DRealDP
     module procedure FileWrite2DRealSP
     module procedure FileWrite2DRealDP
     module procedure FileWrite3DRealSP
     module procedure FileWrite3DRealDP
  end interface FileWrite

  !-----------------------------------------------------------------------------
  !
  !++ Public parameters & variables
  !
  !-----------------------------------------------------------------------------
  !
  !++ Private procedures
  !
  !-----------------------------------------------------------------------------
  !
  !++ Private parameters & variables
  !
  integer,                   private, parameter :: SP = 4 ! single precision
  integer,                   private, parameter :: DP = 8 ! double precision
  integer,                   private, parameter :: File_nfile_max = 64   ! number limit of file
  integer,                   private, parameter :: File_nvar_max  = 512  ! number limit of variables
  integer,                   private, parameter :: File_nstep_max = 2500 ! number limit of time step

  character(LEN=File_HLONG), private,      save :: File_bname_list(File_nfile_max)
  integer,                   private,      save :: File_fid_list  (File_nfile_max)
  integer,                   private,      save :: File_fid_count = 1
  character(LEN=File_HLONG), private,      save :: File_vname_list  (File_nvar_max)
  integer,                   private,      save :: File_vid_fid_list(File_nvar_max)
  integer,                   private,      save :: File_vid_list    (File_nvar_max)
  integer,                   private,      save :: File_vid_count = 1
  integer,                   private,      save :: mpi_myrank

  character(LEN=LOG_LMSG),   private            :: message

contains
  !-----------------------------------------------------------------------------
  subroutine FileCreate( &
       fid,         & ! (out)
       existed,     & ! (out)
       basename,    & ! (in)
       title,       & ! (in)
       source,      & ! (in)
       institution, & ! (in)
       master,      & ! (in)
       myrank,      & ! (in)
       rankidx,     & ! (in)
       single,      & ! (in) optional
       time_units,  & ! (in) optional
       append       ) ! (in) optional
    implicit none

    integer,          intent(out)           :: fid
    logical,          intent(out)           :: existed
    character(LEN=*), intent( in)           :: basename
    character(LEN=*), intent( in)           :: title
    character(LEN=*), intent( in)           :: source
    character(LEN=*), intent( in)           :: institution
    integer,          intent( in)           :: master
    integer,          intent( in)           :: myrank
    integer,          intent( in)           :: rankidx(:)
    character(LEN=*), intent( in), optional :: time_units
    logical,          intent( in), optional :: single
    logical,          intent( in), optional :: append

    character(len=File_HSHORT) :: time_units_
    logical :: single_
    integer :: mode
    integer :: error

    intrinsic size

    if ( present(time_units) ) then
       time_units_ = time_units
    else
       time_units_ = 'sec'
    end if

    mpi_myrank = myrank

    if ( present(single) ) then
       if ( single .and. (myrank .ne. master) ) return
       single_ = single
    else
       single_ = .false.
    endif

    mode = File_FWRITE
    if ( present(append) ) then
       if ( append ) mode = File_FAPPEND
    end if

    call FileGetfid( &
         fid,        & ! (out)
         existed,    & ! (out)
         basename,   & ! (in)
         mode,       & ! (in)
         single_     & ! (in)
         )

    if ( existed ) return

    !--- append package header to the file
    call file_set_global_attributes( fid,         & ! (in)
         title, source, institution, time_units_, & ! (in)
         myrank, rankidx, size(rankidx),          & ! (in)
         error                                    ) ! (out)
    if ( error /= SUCCESS_CODE ) then
       call Log('E', 'xxx failed to set global attributes')
    end if

    return
  end subroutine FileCreate

  !-----------------------------------------------------------------------------
  subroutine FileSetOption( &
       fid,      & ! (in)
       filetype, & ! (in)
       key,      & ! (in)
       val       & ! (in)
       )
    integer,          intent(in) :: fid
    character(LEN=*), intent(in) :: filetype
    character(LEN=*), intent(in) :: key
    character(LEN=*), intent(in) :: val

    integer error

    call file_set_option( fid,                & ! (in)
                          filetype, key, val, & ! (in)
                          error               ) ! (out)
    if ( error /= SUCCESS_CODE ) then
       call Log('E', 'xxx failed to set option')
    end if

    return
  end subroutine FileSetOption

  !-----------------------------------------------------------------------------
  subroutine FileOpen( &
      fid,       & ! (out)
      basename,  & ! (in)
      mode,      & ! (in)
      single     & ! (in) optional
      )
    implicit none

    integer,          intent(out) :: fid
    character(LEN=*), intent( in) :: basename
    integer,          intent( in) :: mode
    logical,          intent( in), optional :: single

    logical :: existed
    logical :: single_ = .false.

    if ( present(single) ) single_ = single

    call FileGetfid( fid,        & ! (out)
         existed,                & ! (out)
         basename, mode, single_ ) ! (in)

    return
  end subroutine FileOpen

  !-----------------------------------------------------------------------------
  ! interface FilePutAxis
  !-----------------------------------------------------------------------------
% ["SP", "DP"].each do |rp|
  subroutine FilePutAxisReal<%=rp%>( &
       fid,      & ! (in)
       name,     & ! (in)
       desc,     & ! (in)
       units,    & ! (in)
       dim_name, & ! (in)
       dtype,    & ! (in)
       val       ) ! (in)
    integer,          intent(in) :: fid
    character(len=*), intent(in) :: name
    character(len=*), intent(in) :: desc
    character(len=*), intent(in) :: units
    character(len=*), intent(in) :: dim_name
    integer,          intent(in) :: dtype
    real(<%=rp%>),         intent(in) :: val(:)

    integer error
    intrinsic size

    call file_put_axis( fid,                                          & ! (in)
         name, desc, units, dim_name, dtype, val, size(val), <%=rp%>, & ! (in)
         error                                                   ) ! (out)
    if ( error /= SUCCESS_CODE .and. error /= ALREADY_EXISTED_CODE ) then
       call Log('E', 'xxx failed to put axis')
    end if

    return
  end subroutine FilePutAxisReal<%=rp%>
%end

  !-----------------------------------------------------------------------------
  ! interface FilePutAssociatedCoordinates
  !-----------------------------------------------------------------------------
% for n in 1..4
%   ["SP", "DP"].each do |rp|
  subroutine FilePut<%=n%>DAssociatedCoordinatesReal<%=rp%>( &
       fid,       & ! (in)
       name,      & ! (in)
       desc,      & ! (in)
       units,     & ! (in)
       dim_names, & ! (in)
       dtype,     & ! (in)
       val        ) ! (in)
    integer,          intent(in) :: fid
    character(len=*), intent(in) :: name
    character(len=*), intent(in) :: desc
    character(len=*), intent(in) :: units
    character(len=*), intent(in) :: dim_names(:)
    integer,          intent(in) :: dtype
    real(<%=rp%>),         intent(in) :: val(<%=Array.new(n){":"}.join(",")%>)

    integer error
    intrinsic size

    call file_put_associated_coordinates( fid,                 & ! (in)
         name, desc, units, dim_names, size(dim_names), dtype, & ! (in)
         val, <%=rp%>,                                         & ! (in)
         error                                                 ) ! (out)
    if ( error /= SUCCESS_CODE .and. error /= ALREADY_EXISTED_CODE ) then
       call Log('E', 'xxx failed to put associated coordinates')
    end if

    return
  end subroutine FilePut<%=n%>DAssociatedCoordinatesReal<%=rp%>
%  end
% end

  !-----------------------------------------------------------------------------
  ! interface FileAddVariable
  !-----------------------------------------------------------------------------
  subroutine FileAddVariableNoT( &
       vid,     & ! (out)
       fid,     & ! (in)
       varname, & ! (in)
       desc,    & ! (in)
       units,   & ! (in)
       dims,    & ! (in)
       dtype,   & ! (in)
       tavg     & ! (in) optional
       )
    integer,          intent(out) :: vid
    integer,          intent( in) :: fid
    character(len=*), intent( in) :: varname
    character(len=*), intent( in) :: desc
    character(len=*), intent( in) :: units
    character(len=*), intent( in) :: dims(:)
    integer,          intent( in) :: dtype
    logical,          intent( in), optional :: tavg

    call FileAddVariableRealDP(vid, fid, varname, desc, units, dims, dtype, &
         -1.0_DP, tavg )

    return
  end subroutine FileAddVariableNoT
% ["SP", "DP"].each do |rp|
  subroutine FileAddVariableReal<%=rp%>( &
       vid,     & ! (out)
       fid,     & ! (in)
       varname, & ! (in)
       desc,    & ! (in)
       units,   & ! (in)
       dims,    & ! (in)
       dtype,   & ! (in)
       tint,    & ! (in)
       tavg     & ! (in) optional
       )
    integer,          intent(out) :: vid
    integer,          intent( in) :: fid
    character(len=*), intent( in) :: varname
    character(len=*), intent( in) :: desc
    character(len=*), intent( in) :: units
    character(len=*), intent( in) :: dims(:)
    integer,          intent( in) :: dtype
    real(<%=rp%>),         intent( in) :: tint
    logical,          intent( in), optional :: tavg

    real(DP) :: tint8
    integer  :: itavg
    integer  :: error
    integer  :: n

    intrinsic size
    !---------------------------------------------------------------------------

    vid = -1
    do n = 1, File_vid_count
       if ( File_vid_fid_list(n) == fid .and. &
            varname == File_vname_list(n) ) then
          vid = File_vid_list(n)
       end if
    enddo

    if ( vid < 0 ) then ! variable registration
       !--- register new variable
       write(message,*) '*** [File] Var registration'
       call Log("I", message)
       write(message,*) '*** variable name: ', trim(varname)
       call Log("I", message)

       tint8 = real(tint,DP)

       if ( present(tavg) ) then
          if ( tavg ) then
             itavg = 1
          else
             itavg = 0
          end if
       else
          itavg = 0
       end if

       call file_add_variable( vid,                             & ! (out)
            fid, varname, desc, units, dims, size(dims), dtype, & ! (in)
            tint8, itavg,                                       & ! (in)
            error                                               ) ! (out)
       if ( error /= SUCCESS_CODE ) then
          call Log('E', 'xxx failed to add variable')
       end if

       File_vname_list  (File_vid_count) = trim(varname)
       File_vid_list    (File_vid_count) = vid
       File_vid_fid_list(File_vid_count) = fid
       File_vid_count                    = File_vid_count + 1
    endif

    return
  end subroutine FileAddVariableReal<%=rp%>
%end

  !-----------------------------------------------------------------------------
  ! FileGetShape
  !-----------------------------------------------------------------------------
  subroutine FileGetShape( &
      dims,          & ! (out)
      basename,      & ! (in)
      varname,       & ! (in)
      myrank,        & ! (in)
      single         & ! (in) optional
      )
    implicit none

    integer,          intent(out)           :: dims(:)
    character(LEN=*), intent( in)           :: basename
    character(LEN=*), intent( in)           :: varname
    integer,          intent( in)           :: myrank
    logical,          intent( in), optional :: single

    integer :: fid
    type(datainfo) :: dinfo
    integer :: error
    integer :: n

    logical :: single_ = .false.

    intrinsic size
    intrinsic shape
    !---------------------------------------------------------------------------

    mpi_myrank = myrank

    if ( present(single) ) single_ = single

    !--- search/register file
    call FileOpen( fid,                & ! (out)
         basename, File_FREAD, single_ ) ! (in)

    !--- get data information
    call file_get_datainfo( dinfo, & ! (out)
         fid, varname, 0,          & ! (in)
         error                     ) ! (out)

    !--- verify
    if ( error /= SUCCESS_CODE ) then
       call Log('E', 'xxx failed to get data information :'//trim(varname))
    end if

    if ( dinfo%rank /= size(dims) ) then
       write(message,*) 'xxx rank is different, ', size(dims), dinfo%rank
       call Log('E', message)
    end if
    do n = 1, size(dims)
       dims(n) = dinfo%dim_size(n)
    end do

    return
  end subroutine FileGetShape

  !-----------------------------------------------------------------------------
  ! interface File_read
  !-----------------------------------------------------------------------------
% for d in 1..3
%   idx = ( [":"]*d ).join(",")
%   ["SP", "DP"].each do |rp|
  subroutine FileRead<%=d%>DReal<%=rp%>( &
      var,           & ! (out)
      basename,      & ! (in)
      varname,       & ! (in)
      step,          & ! (in)
      myrank,        & ! (in)
      allow_missing, & ! (in) optional
      single         & ! (in) optional
      )
    implicit none

    real(<%=rp%>),         intent(out)           :: var(<%=idx%>)
    character(LEN=*), intent( in)           :: basename
    character(LEN=*), intent( in)           :: varname
    integer,          intent( in)           :: step
    integer,          intent( in)           :: myrank
    logical,          intent( in), optional :: allow_missing !--- if data is missing, set value to zero
    logical,          intent( in), optional :: single

    integer :: fid
    type(datainfo) :: dinfo
    integer :: dim_size(<%=d%>)
    integer :: error
    integer :: n

    logical :: single_ = .false.

    intrinsic shape
    !---------------------------------------------------------------------------

    mpi_myrank = myrank

    if ( present(single) ) single_ = single

    !--- search/register file
    call FileOpen( fid,                & ! (out)
         basename, File_FREAD, single_ ) ! (in)

    !--- get data information
    call file_get_datainfo( dinfo, & ! (out)
         fid, varname, step,       & ! (in)
         error                     ) ! (out)

    !--- verify
    if ( error /= SUCCESS_CODE ) then
       if ( present(allow_missing) ) then
          if ( allow_missing ) then
             write(message,*) 'xxx [INPUT]/[File] data not found! : ', &
                  'varname= ',trim(varname),', step=',step
             call Log('I', message)
             call Log('I', 'xxx [INPUT]/[File] Value is set to 0.')
             var(<%=idx%>) = 0.0_<%=rp%>
          else
             call Log('E', 'xxx failed to get data information :'//trim(varname))
          end if
       else
          call Log('E', 'xxx failed to get data information :'//trim(varname))
       end if
    end if

    if ( dinfo%rank /= <%=d%> ) then
       write(message,*) 'xxx rank is not <%=d%>', dinfo%rank
       call Log('E', message)
    end if
    dim_size(:) = shape(var)
    do n = 1, <%=d%>
       if ( dinfo%dim_size(n) /= dim_size(n) ) then
          write(message,*) 'xxx shape is different: ', varname, n, dinfo%dim_size(n), dim_size(n)
          call Log('E', message)
       end if
    end do

    call file_read_data( var(<%=idx%>), & ! (out)
         dinfo, <%=rp%>,                  & ! (in)
         error                       ) ! (out)
    if ( error /= SUCCESS_CODE ) then
       call Log('E', 'xxx failed to get data value')
    end if

    return
  end subroutine FileRead<%=d%>DReal<%=rp%>
%   end
% end

  !-----------------------------------------------------------------------------
  ! interface FileWrite
  !-----------------------------------------------------------------------------
% for d in 1..3
%   idx = ( [":"]*d ).join(",")
%   ["SP", "DP"].each do |rp|
  subroutine FileWrite<%=d%>DReal<%=rp%>( &
      vid,     & ! (in)
      var,     & ! (in)
      t_start, & ! (in)
      t_end    & ! (in)
      )
    implicit none

    real(<%=rp%>), intent(in) :: var(<%=idx%>)
    integer,  intent(in) :: vid
    real(DP), intent(in) :: t_start
    real(DP), intent(in) :: t_end

    real(DP) :: ts, te

    integer :: error
    !---------------------------------------------------------------------------

    ts = t_start
    te = t_end
    call file_write_data( vid, var(<%=idx%>), ts, te, <%=rp%>, & ! (in)
         error                                     ) ! (out)
    if ( error /= SUCCESS_CODE ) then
       call Log('E', 'xxx failed to write data')
    end if

    return
  end subroutine FileWrite<%=d%>DReal<%=rp%>
%   end
% end

  !-----------------------------------------------------------------------------
  subroutine FileClose( &
       fid & ! (in)
       )
    implicit none

    integer, intent(in) :: fid

    character(LEN=File_HLONG) :: fname
    integer                   :: error
    integer                   :: n
    !---------------------------------------------------------------------------

    if ( fid < 0 ) return

    do n = 1, File_fid_count-1
       if ( File_fid_list(n) == fid ) exit
    end do
    if ( fid /= File_fid_list(n) ) then
       write(message,*) 'xxx invalid fid' , fid
       call Log('E', message)
    end if
    call file_close( fid , & ! (in)
         error             ) ! (out)
    if ( error == SUCCESS_CODE ) then
       write(message, '(1x,A,i3)') '*** [File] File Close : NO.', n
       call Log('I', message)
       call FileMakeFname(fname,trim(File_bname_list(n)),'pe',mpi_myrank,6)
       call Log('I', '*** closed filename: ' // trim(fname))
    else if ( error /= ALREADY_CLOSED_CODE ) then
       call Log('E', 'xxx failed to close file')
    end if

    do n = 1, File_fid_count-1
       if ( File_fid_list(n) == fid ) then
          File_fid_list(n) = -1
          File_bname_list(n) = ''
       end if
    end do

    return
  end subroutine FileClose
  !-----------------------------------------------------------------------------
  subroutine FileCloseAll
    implicit none

    integer n
    !---------------------------------------------------------------------------

    do n = 1, File_fid_count-1
       call FileClose( File_fid_list(n) )
    enddo

    return
  end subroutine FileCloseAll

  !-----------------------------------------------------------------------------
  ! private
  !-----------------------------------------------------------------------------
  subroutine FileMakeFname( &
       fname,    & ! (out)
       basename, & ! (in)
       prefix,   & ! (in)
       myrank,   & ! (in)
       len       ) ! (in)
    character(len=*), intent(out) :: fname
    character(len=*), intent( in) :: basename
    character(len=*), intent( in) :: prefix
    integer,          intent( in) :: myrank
    integer,          intent( in) :: len

    !                           12345678901234567
    character(len=17) :: fmt = "(A, '.', A, I*.*)"
    !---------------------------------------------------------------------------

    if ( len < 1 .or. len > 9 ) then
       call Log('E', 'xxx len is invalid')
    end if

    write(fmt(14:14),'(I1)') len
    write(fmt(16:16),'(I1)') len
    write(fname, fmt) trim(basename), trim(prefix), myrank

    return
  end subroutine FileMakeFname
  !-----------------------------------------------------------------------------
  subroutine FileGetfid( &
      fid,        &
      existed,    &
      basename,   &
      mode,       &
      single      )
    implicit none

    integer,          intent(out) :: fid
    logical,          intent(out) :: existed
    character(LEN=*), intent( in) :: basename
    integer,          intent( in) :: mode
    logical,          intent( in) :: single


    character(LEN=File_HSHORT) :: rwname(0:2)
    data rwname / 'READ','WRITE','APPEND' /

    character(LEN=File_HLONG) :: fname
    integer                  :: n

    integer :: error
    !---------------------------------------------------------------------------

    !--- search existing file
    fid = -1
    do n = 1, File_fid_count-1
       if ( basename==File_bname_list(n) ) fid = File_fid_list(n)
    enddo

    if ( fid >= 0 ) then
       existed = .true.
       return
    end if

    !--- register new file and open
    if ( single ) then
       fname = trim(basename)//'.peall'
    else
       call FileMakeFname(fname,trim(basename),'pe',mpi_myrank,6)
    endif

    call file_open( fid, & ! (out)
         fname, mode,    & ! (in)
         error           ) ! (out)
    if ( error /= SUCCESS_CODE ) then
       call Log('E', 'xxx failed to open file :'//trim(fname))
    end if

    write(message,*) '*** [File] File registration : ',trim(rwname(mode)),' -', fid
    call Log("I", message)
    write(message,*) '*** filename: ', trim(fname)
    call Log("I", message)

    File_bname_list(File_fid_count) = trim(basename)
    File_fid_list  (File_fid_count) = fid
    File_fid_count                  = File_fid_count + 1

    existed = .false.

    return
  end subroutine FileGetfid

end module gtool_file
!-------------------------------------------------------------------------------


!--
! vi<%=":"%>set readonly sw=4 ts=8
!
!Local Variables<%=":"%>
!mode: f90
!buffer-read-only: t
!End:
!
!++
